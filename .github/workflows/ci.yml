name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  setup-dependencies:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20, 22]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PNPM
        uses: pnpm/action-setup@v4.0.0
        with:
          version: '9.15.3'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the Project
        run: pnpm build

  package-tests:
    needs: setup-dependencies
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node: [20, 22]
        package: [connectors, infrastructure, transformers]
    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 5432:5432
          - 6333:6333
          - 6379:6379
          - 11434:11434
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: toor
          POSTGRES_DB: ait
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - ./docker-compose.yml:/docker-compose.yml
        options: >-
          --privileged
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up PNPM
        uses: pnpm/action-setup@v2.6.0
        with:
          version: '7'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Start Services
        run: docker-compose up -d

      - name: Wait for Services to be Healthy
        run: |
          for service in postgres qdrant redis ollama; do
            echo "Waiting for $service to be healthy..."
            until docker inspect --format='{{.State.Health.Status}}' ait_$service | grep "healthy"; do
              sleep 5
            done
            echo "$service is healthy."
          done

      - name: Run Tests for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          pnpm test

      - name: Tear Down Services
        if: always()
        run: docker-compose down
